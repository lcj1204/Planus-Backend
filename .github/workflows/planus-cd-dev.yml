# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Planus Develop Server CD

on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: 저장소 Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: properties(yml) 생성
        shell: bash
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
          
          touch ./application-aws.yml
          echo "${{ secrets.APPLICATION_AWS_YML }}" > ./application-aws.yml
          
          touch ./application-db.yml
          echo "${{ secrets.APPLICATION_DB_YML }}" > ./application-db.yml
          
          touch ./application-oauth.yml
          echo "${{ secrets.APPLICATION_OAUTH_YML }}" > ./application-oauth.yml

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 애플리케이션 빌드
        run: ./gradlew clean build -x test

      - name: Dokcer 이미지 빌드
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{secrets.DOCKER_PASSWORD}}
          docker build -f DockerFile/Dockerfile_dev -t ${{ secrets.DOCKER_USERNAME }}/planus_dev .
          docker push ${{secrets.DOCKER_USERNAME}}/planus_dev

      - name: compose.yml 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_PEM_KEY }}
          source: "./docker-compose/docker-compose.dev.yml"
          target: ${{ secrets.COMPOSE_PATH }}

      - name: EC2 deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DEV_HOST}}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_PEM_KEY }}
          script: |
            cp ./docker-compose/docker-compose.dev.yml ./docker-compose.yml
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/planus_dev
            docker-compose up -d
            docker image prune -f
